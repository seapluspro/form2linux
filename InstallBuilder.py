'''
InstallBuilder.py

Created on: 23.08.2023
    Author: SeaPlusPro
   License: CC0 1.0 Universal
'''
import re
import os.path
import json
import pwd
import grp
import time
from text import JsonUtils
from base import StringUtils
from base import FileHelper
from Builder import Builder, CLIError, GlobalOptions


class InstallBuilder (Builder):
    '''Processes the "setup" command.
    '''

    def __init__(self, options: GlobalOptions):
        '''Constructor.
        @param verbose: <em>True</em>: info messages will be displayed
        @param dry: <em>True</em>: says what to do, but do not change data
        '''
        Builder.__init__(self, True, options)
        self._baseDirectory = None
        self._packages = []
        self._mailHub = None
        self._users = []
        self._modeSmtp = None
        self._baseSmtp = None

    def buildSsmtp(self):
        '''Builds the configuration of the package ssmtp.
        '''
        needsRoot = self._baseSmtp.startswith('/etc')
        self.ensureDirectory(self._baseSmtp, needsRoot)
        full = os.path.join(self._baseSmtp, 'ssmtp.conf')
        self.saveFile(full, needsRoot)
        if self._mailHub.find('gmx') >= 0:
            rewriteDomain = 'rewriteDomain=gmx.net\nhostname=gmx.net'
        else:
            rewriteDomain = '# rewriteDomain=gmx.net\n# hostname=gmx.net'
        if self._modeSmtp == 'StartTLS':
            tls = f'UseSTARTTLS=YES'
        elif self._modeSmtp == 'TLS':
            tls = f'TLS=YES'
        contents = f'''# generated by Form2Linux
root={self._senderSmtp}
mailhub={self._mailHub}
{rewriteDomain}
FromLineOverride=YES
AuthUser={self._senderSmtp}
AuthPass={self._codeSmtp}
{tls}
TLS_CA_File=/etc/pki/tls/certs/ca-bundle.crt
'''
        self.writeFile(full, contents, needsRoot)
        full = os.path.join(self._baseSmtp, 'revaliases')
        if len(self._users) > 0:
            self.saveFile(full, needsRoot)
            contents = []
            for user in self._users:
                contents.append(f'{user}:{self._senderSmtp}:{self._mailHub}\n')
        self.writeFile(full, ''.join(contents), needsRoot)

    def checkStandardHost(self, form: str):
        '''Checks the input data for the method adaptUsers() and stores the data that must be inserted.
        @param passwd: the name of the 2nd password file
        @param group: the name of the 2nd group file
        @param shadow: the name of the 2nd shadow password file
        '''
        with open(form, 'r', encoding='utf-8') as fp:
            data = fp.read()
            self._root = root = json.loads(data)
            variables = root['Variables']
            for name in variables:
                self.setVariable(name, variables[name])
            self.finishVariables()
            entries = 'ConfigurationDirectory:s Packages:a Ssmtp:m Variables:m'
            JsonUtils.checkJsonMapAndRaise(root, entries, True, 'Comment:s')
            self._baseDirectory = self.checkNodePattern('ConfigurationDirectory', None, self._wrongFilenameChars)
            packages = self.valueOf('Packages', 'a')
            for item in packages:
                item = self.replaceVariables(item)
                for name in item.split(' '):
                    self.checkPattern('Packages', name, r'^[\w.+:-]+$')
                    self._packages.append(name)
            # Ssmtp:
            entries = 'Directory:s Sender:s !Code:s MailHub:s Users:s Mode:s'
            JsonUtils.checkJsonMapAndRaise(root['Ssmtp'], entries, True, 'Comment:s')
            
            self._baseSmtp = self.checkNodePattern('Ssmtp Directory', None, self._wrongFilenameChars)
            self._senderSmtp = self.checkNodePattern('Ssmtp Sender', None, r'[:;/,*?]')
            if self._senderSmtp.find('@') < 0:
                raise CLIError(f'wrong Ssmtp.Sender: {self._senderSmtp} missing @')
            self._codeSmtp = self.valueOf('Ssmtp !Code')
            if self._codeSmtp == '':
                raise CLIError('empty Ssmtp.Code')
            self._mailHub = self.checkNodePattern('Ssmtp MailHub', r'^[\w.+-]+:\d+')
            users = self.valueOf('Ssmtp Users')
            for user in users.split(','):
                user = user.strip()
                self.checkPattern('Ssmtp.Users', user, None, r'[^\w.+-]')
                self._users.append(user)
            self._modeSmtp = self.valueOf('Ssmtp Mode')
            if self._modeSmtp not in ('StartTLS', 'TLS'):
                raise CLIError(f'wrong Ssmtp.Mode: {self._modeSmtp} Use StartTLS or TLS')


    def exampleStandardHost(self, filename: str):
        '''Shows the example for the configuration of the command "standard-host".
        @param filename: None or the file to store
        '''
        message = '''{
  "Variables": {
    "EMAIL": "any@gmx.de"
  },
  "ConfigurationDirectory": "/etc/form2linux",
  "Packages": [
      "htop iotop tmux bzip2 zip unzip rsync sudo zram-tools smartmontools wget curl",
      "nfs-common nfs-kernel-server nmap openssh-server iotop jnettop ssl-cert ca-certificates net-tools ntp",
      "ssmtp shareutils",
  ],
  "Smtp": {
      "Directory": "/etc/ssmtp",
      "Sender": "%(EMAIL)",
      "!Code": "",
      "MailHub": "mail.gmx.net:587",
      "Users": "root,jonny",
      "Comment": "StartTLS or TLS",
      "Mode": "StartTLS"
  }
}
'''
        if filename is None:
            self.log(message)
        else:
            StringUtils.toFile(filename, message)

    def standardHost(self, form):
        '''Installs standard packages for a server
        @param form: the name of the form with Json format
        '''
        self.checkStandardHost(form)
        needsRoot = self._baseDirectory.startswith('/etc')
        cmd = f"apt-get -y install {' '.join(self._packages)}"
        self.runProgram(cmd, True, True)
        self.ensureDirectory(self._baseDirectory, needsRoot)
        self.buildSsmtp()


